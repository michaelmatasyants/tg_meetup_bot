from config import BOT_TOKEN
from keyboards import (role_selection_keyboard, get_id_keyboard, next_keyboard,
                       go_home_keyboard, event_keyboard,
                       guest_registration_keyboard,
                       go_home_contact_organizer_keyboard)
from keyboards import (homepage_button, event_homepage_button,
                       show_event_program_button)
from texts import TEXTS

from temporary_data import speakers, event, event_program

import os
from datetime import datetime
from aiogram import Bot, Router
from aiogram.types import Message, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import CommandStart, Text, StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'meetup.settings')
os.environ['DJANGO_ALLOW_ASYNC_UNSAFE'] = 'true'
import django
from django.conf import settings

if not settings.configured:
    django.setup()

from mainapp.models import Event, User, Report, Question

bot = Bot(BOT_TOKEN)
router = Router()


def f():
    pass


class FSM(StatesGroup):
    speaker_state = State()
    guest_state = State()
    enter_email_state = State()
    enter_question_state = State()


@router.message(CommandStart())
@router.message(Text(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'))
async def process_start_command(message: Message, state: FSMContext):
    await message.answer(text=TEXTS['greeting'],
                         reply_markup=role_selection_keyboard)
    await state.set_state(default_state)


@router.message(Text(text='–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É'))
async def process_contact_organizer(message: Message, state: FSMContext):
    await message.answer(text='<–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞>')


# –≤–µ—Ç–∫–∞ —Å–ø–∏–∫–µ—Ä–∞
@router.message(Text(text='–°–ø–∏–∫–µ—Ä'))
async def process_speaker_greeting(message: Message, state: FSMContext):
    if speaker := User.objects.filter(tg_id=message.from_user.id, role='S'):
        await message.answer(text=TEXTS['speaker_greeting'].format(speaker[0].full_name),
                             reply_markup=next_keyboard)
    else:
        await message.answer(text=TEXTS['speaker_not_recognized'],
                             reply_markup=get_id_keyboard)


@router.message(Text(text='–£–∑–Ω–∞—Ç—å —Å–≤–æ–π telegram id'))
async def process_get_id(message: Message):
    await message.answer(text=f'–í–∞—à telegram id:\n{message.from_user.id}')


@router.message(Text(text='–î–∞–ª–µ–µ'))
async def process_display_reports(message: Message):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–æ–∫–ª–∞–¥ –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫–ª–∞–¥—É:\n'
    if reports := Report.objects.filter(speaker__tg_id=message.from_user.id, event__date=datetime.now().date()):
        kb_builder = ReplyKeyboardBuilder()
        for count, report in enumerate(reports, start=1):
            text += TEXTS['reports'].format(count, report.report_title, report.event.date, report.planed_start_time, report.event.place)
        buttons = [KeyboardButton(text=f'‚Ññ{count} {report.report_title}') for count, report in enumerate(reports, start=1)]
        kb_builder.row(*buttons, width=1)
        kb_builder.row(homepage_button)
        await message.answer(text=text, reply_markup=kb_builder.as_markup(resize_keyboard=True))
    else:
        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.', reply_markup=go_home_contact_organizer_keyboard)


@router.message(lambda msg: msg.text.startswith('‚Ññ'))
async def process_report_selection(message: Message):
    report = Report.objects.get(report_title=message.text[3:])
    text = TEXTS['report'].format(report.report_title, report.event.date, report.planed_start_time, report.event.place)
    btn = InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –¥–æ–∫–ª–∞–¥', callback_data=report.report_title)
    kb = InlineKeyboardMarkup(inline_keyboard=[[btn]])
    await message.answer(text=text, reply_markup=kb)


@router.callback_query(lambda callback: callback.data in Report.objects.all().values_list('report_title', flat=True))
async def process_start_report(callback: CallbackQuery):
    await callback.answer()
    report = Report.objects.get(report_title=callback.data)
    report.actual_start_time = datetime.now()
    report.save()
    btn = InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–∫–ª–∞–¥', callback_data='$#' + report.report_title)
    kb = InlineKeyboardMarkup(inline_keyboard=[[btn]])
    new_text = callback.message.text + '\n\n–í—ã –Ω–∞—á–∞–ª–∏ –¥–æ–∫–ª–∞–¥. –ö–æ–≥–¥–∞ –¥–æ–∫–ª–∞–¥ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–ª—É—à–∞—Ç–µ–ª–µ–π.'
    await callback.message.edit_text(text=new_text, reply_markup=kb)
    await callback.message.answer(text='–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–∫–ª–∞–¥ üëÜ',
                                  reply_markup=ReplyKeyboardRemove())


@router.callback_query(lambda callback: callback.data.startswith('$#'))
async def process_end_report(callback: CallbackQuery):
    report = Report.objects.get(report_title=callback.data[2:])
    report.actual_end_time = datetime.now()
    report.save()
    questions = Question.objects.filter(report=report)
    text = '–í–æ–ø—Ä–æ—Å—ã —Å–ª—É—à–∞—Ç–µ–ª–µ–π:\n'
    for count, question in enumerate(questions, start=1):
        text += TEXTS['question'].format(count, question.user.tg_nickname, question.question_title, question.question_text)
    await callback.message.answer(text=text,
                                  reply_markup=go_home_keyboard)


# –≤–µ—Ç–∫–∞ –≥–æ—Å—Ç—è
# @router.message(StateFilter(default_state, FSM.speaker_state), Text(text='–ì–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'))
@router.message(Text(text='–ì–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'))
async def process_guest_greeting(message: Message, state: FSMContext):
    await message.answer(text=TEXTS['guest_greeting'].format(message.from_user.first_name),
                         reply_markup=guest_registration_keyboard)
    # await state.set_state(FSM.guest_state)


@router.message(Text(text='–í–≤–µ—Å—Ç–∏ Email'))
async def process_enter_email(message: Message, state: FSMContext):
    await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –ú—ã —á–µ—Å—Ç–Ω–æ –Ω–µ –±—É–¥–µ–º —Å–ø–∞–º–∏—Ç—å.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –≤–∞—à Email:',
                         reply_markup=go_home_keyboard)
    await state.set_state(FSM.enter_email_state)


@router.message(StateFilter(FSM.enter_email_state))
async def enter_mail(message: Message, state: FSMContext):
    email = message.text
    print('email:', email)
    await message.answer(text=TEXTS['success_registration'].format(event['topic'], event['date'], event['place'], event['time']),
                         reply_markup=event_keyboard)
    await state.set_state(default_state)


@router.message(Text(text=['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ Email', '–ù–∞ –≥–ª–∞–≤–Ω—É—é']))
async def process_without_email(message: Message, state: FSMContext):
    if str(message.from_user.id) not in User.objects.all().values_list('tg_id', flat=True):
        User.objects.update_or_create(tg_id=message.from_user.id, tg_nickname=message.from_user.username)
    await message.answer(text=TEXTS['success_registration'].format(event['topic'], event['date'], event['place'], event['time']),
                         reply_markup=event_keyboard)


@router.message(Text(text='–°–ø–∏–∫–µ—Ä—ã'))
async def process_show_speakers(message: Message, state: FSMContext):
    kb_builder = ReplyKeyboardBuilder()
    buttons = [KeyboardButton(text=speaker['name']) for speaker in speakers]
    kb_builder.row(*buttons, width=2)
    kb_builder.row(show_event_program_button)
    kb_builder.row(event_homepage_button)
    await message.answer(text=TEXTS['show_speakers'], reply_markup=kb_builder.as_markup(resize_keyboard=True))


@router.message(Text(text='–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'))
async def process_show_program(message: Message, state: FSMContext):
    kb_builder = ReplyKeyboardBuilder()
    kb_builder.row(event_homepage_button)
    await message.answer(text=event_program,
                         reply_markup=kb_builder.as_markup(resize_keyboard=True))


@router.message(Text(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É'))
async def process_ask_question(message: Message, state: FSMContext):
    kb_builder = ReplyKeyboardBuilder()
    kb_builder.row(event_homepage_button)
    await message.answer(text='–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å —á–∏—Ç–∞–µ—Ç –¥–æ–∫–ª–∞–¥ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ.\n\n<–°–ø–∏–∫–µ—Ä>\n<–¢–µ–º–∞ –¥–æ–∫–ª–∞–¥–∞>',
                         reply_markup=kb_builder.as_markup(resize_keyboard=True))
    await state.set_state(FSM.enter_question_state)


@router.message(StateFilter(FSM.enter_question_state))
async def enter_question(message: Message, state: FSMContext):
    question = message.text
    print('question:', question)
    kb_builder = ReplyKeyboardBuilder()
    kb_builder.row(event_homepage_button)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å.\n–°–ø–∏–∫–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–∫–ª–∞–¥–∞.',
                         reply_markup=kb_builder.as_markup(resize_keyboard=True))
    await state.set_state(default_state)


# process_start_command
# process_contact_organizer
# process_speaker_greeting
# process_get_id
# process_display_reports
# process_report_selection
# process_start_report
# process_end_report
# process_guest_greeting
# process_enter_email
# enter_mail
# process_process_without_email
# process_show_speakers
# process_show_program
# process_ask_question
# enter_question

# print(message.json(indent=4, exclude_none=True))
